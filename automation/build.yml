parameters:  
- name: buildConfiguration
  displayName: Build Configuration
  type: string
  default: Debug
  values:
  - Debug
  - Release
- name: runApp
  displayName: Run Application
  type: boolean
  default: true

trigger:
  batch: true
  branches:
    include:
      - envs/*
  paths:
    include:
      - app

pool:
  vmImage: 'windows-latest'

variables:
  solutionMario: 'app/AzureWorld/TotallyNotMarioWorld'
  solutionMarioFile: 'TotallyNotMarioWorld.csproj'
  artifactMario: 'Mario'
  solutionLuigi: 'app/AzureWorld/TotallyNotLuigiWorld'
  solutionLuigiFile: 'TotallyNotLuigiWorld.csproj'
  artifactLuigi: 'Luigi'
  start_time: $[ format('{0:yyyy}/{0:MM}/{0:dd}-{0:HH}:{0:mm}:{0:ss}', pipeline.startTime) ] 
  ${{ if and(or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI')), eq(variables['Build.SourceBranch'], 'refs/heads/envs/prod')) }}: 
    build_configuration: 'Release' 
  ${{ if and(or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'BatchedCI')), eq(variables['Build.SourceBranch'], 'refs/heads/envs/dev')) }}: 
    build_configuration: 'Debug' 
  ${{ if eq( variables['Build.Reason'], 'Manual' ) }}: 
    build_configuration: ${{ parameters.buildConfiguration }} 

jobs:
- job: BuildMario
  displayName: Build Mario
  steps: 
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solutionMario)/$(solutionMarioFile)'

  - task: VSBuild@1 
    inputs: 
      solution: '$(solutionMario)/$(solutionMarioFile)'
      platform: $(buildPlatform)
      configuration: $(build_configuration)

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/$(solutionMario)/bin/$(buildPlatform)/$(build_configuration)/net6.0'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactMario)'
      OverWrite: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/$(artifactMario)'
      artifact: '$(artifactMario)'
      publishLocation: 'pipeline'

- ${{ if parameters.runApp }}: 
  - job: RunMario
    displayName: Run Mario
    dependsOn: BuildMario
    steps: 
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifactMario)'
        downloadPath: '$(System.ArtifactsDirectory)\$(artifactMario)'
        cleanDestinationFolder: true

    - powershell: |
        $ptime = "$(start_time)"
        $stime = Get-Date -Format "yyyy/MM/dd-HH:mm:ss"
        $path = "$(System.ArtifactsDirectory)\$(artifactMario)"
        Write-Host "Pipeline timestamp:  $ptime"
        Write-Host "Script timestamp:    $stime"
        Write-Host "Platform:            $(buildPlatform)"
        Write-Host "Build configuration: $(build_configuration)"
        Write-Host "Path:                $path"
        Write-Host  
        Write-Host "Running ..."
  
        & "$path\TotallyNotMarioWorld.exe"
      displayName: Run Application

- job: BuildLuigi
  displayName: Build Luigi
  steps: 
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solutionLuigi)/$(solutionLuigiFile)'

  - task: VSBuild@1 
    inputs: 
      solution: '$(solutionLuigi)/$(solutionLuigiFile)'
      platform: $(buildPlatform)
      configuration: $(build_configuration)

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/$(solutionLuigi)/bin/$(buildPlatform)/$(build_configuration)/net6.0'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactLuigi)'
      OverWrite: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/$(artifactLuigi)'
      artifact: '$(artifactLuigi)'
      publishLocation: 'pipeline'

- ${{ if parameters.runApp }}:
  - job: RunLuigi
    displayName: Run Luigi
    dependsOn: BuildLuigi
    steps: 
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifactLuigi)'
        downloadPath: '$(System.ArtifactsDirectory)\$(artifactLuigi)'
        cleanDestinationFolder: true
  
    - powershell: |
        $ptime = "$(start_time)"
        $stime = Get-Date -Format "yyyy/MM/dd-HH:mm:ss"
        $path = "$(System.ArtifactsDirectory)\$(artifactLuigi)"
        Write-Host "Pipeline timestamp:  $ptime"
        Write-Host "Script timestamp:    $stime"
        Write-Host "Platform:            $(buildPlatform)"
        Write-Host "Build configuration: $(build_configuration)"
        Write-Host "Path:                $path"
        Write-Host  
        Write-Host "Running ..."
  
        & "$path\TotallyNotLuigiWorld.exe"
      displayName: Run Application